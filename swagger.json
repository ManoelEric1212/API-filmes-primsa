{
  "openapi": "3.0.1",
  "info":{
    "title": "API-Filmes(Prisma ORM)",
    "description":"Documentação para API filmes criada com Prisma, Typescript, Express e Clean Architecture",
    "version": "1.0.0",
    "contact":{
      "email": "manoeleric59@gmail.com"
    }
  },
  "tags":[
    {
      "name": "Users",
      "description": "Info about users"
    },{
      "name": "Movies",
      "description":"Info about movies"
    }
  ],
  "servers":[
    {
      "url": "http://localhost:3333/",
      "description": "API de test"
    }
  ],
  "paths":{
    "/users":{
      "post": {
        "summary":"Register of a user",
        "description": "Route for register new users ",
        "tags": ["Users"],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref": "#/components/schemas/User"
              },
              "examples":{
                "user":{
                  "value":{
                    "name": "Name of user",
                    "email": "example@example.com.br"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "User already exists !"
          },
          "500": {
            "description": "Internal server Error"
          },
          "201": {
            "description": "OK",
            "content":{
              "application/json":{
                "schema":{
                  "type": "object",
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "get":{
        "summary": "Obtain users registers",
        "description": "Route for obatin all users register",
        "tags":["Users"],
        "responses":{
          "200": {
            "description": "Ok"
          },
          "204": {
            "description": "Does not exists users registers in database"
          },
          "500":{
            "description": "Internal server error"
          }
        }
      }
    },
    "/movies":{
      "get":{
        "summary": "Obtain movies registers",
        "description": "Route for obatin all movies register",
        "tags":["Movies"],
        "responses":{
          "200": {
            "description": "Ok"
          },
          "500":{
            "description": "Internal server error"
          }
        }
      },
      "post":{
        "summary":"Register of a movie",
        "description": "Route for register new movies ",
        "tags": ["Movies"],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref": "#/components/schemas/Movie"
              },
              "examples":{
                "movie":{
                  "value":{
                    "title": "Name of user",
                    "duration": 123123,
                    "release_date": "2021-03-28T04:04:20.700Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Movie already exists !"
          },
          "500": {
            "description": "Internal server Error"
          },
          "201": {
            "description": "OK",
            "content":{
              "application/json":{
                "schema":{
                  "type": "object",
                  "$ref": "#/components/schemas/Movie"
                }
              }
            }
          }
        }

      }
      },
      "/movies/{id}":{
        "patch":{
          "summary": "Alter values of movie object",
          "description": "Route for modify values of movie object",
          "tags":["Movies"],
          "parameters":[
            {
              "name": "id",
              "in": "path",
              "description": "Modify movie by Id",
              "required": true
            }
          ],
          "requestBody":{
            "content":{
              "application/json":{
                "schema":{
                  "$ref": "#/components/schemas/Movie"
                },
                "examples":{
                  "movie":{
                    "value":{
                      "title": "Name of user",
                      "duration": 123123,
                      "release_date": "2021-03-28T04:04:20.700Z"
                    }
                  }
                }
              }
            }
          },
          "responses":{
            "202": {
              "description": "Ok"
            },
            "400":{
              "description": "MovieId does not exists !"
            },
            "500":{
              "description": "Internal server error"
            }
          }
        },
        "delete":{
          "summary": "Delete a movie",
          "description": "Route for delete values of movie object",
          "tags":["Movies"],
          "parameters":[
            {
              "name": "id",
              "in": "path",
              "description": "Modify movie by Id",
              "required": true
            }
          ],
          "responses":{
            "202":{
              "description": "Movie deleted !"
            },
            "400":{
              "description": "MovieId does not exists !"
            },
            "500":{
              "description":"Internal server error"
            }
          }
        }
      },
      "/movies/release":{
        "get":{
          "summary": "Obtain movies registers order by release date and relationship with user",
          "description": "Route for obatin all movies register orders by release date and relationship with user",
          "tags":["Movies"],
          "responses":{
            "200": {
              "description": "Ok"
            },
            "500":{
              "description": "Internal server error"
            }
          }
        }
      },
      "movies/rent":{
        "post":{
          "summary":"Register of a movieRent",
          "description": "Route for register new movieRent ",
          "tags": ["Movies"],
          "requestBody":{
            "content":{
              "application/json":{
                "schema":{
                  "$ref": "#/components/schemas/MovieRent"
                },
                "examples":{
                  "movieRent":{
                    "value":{
                      "movieId": "64a8d933-affb-45c6-ae1f-7c7f4098856d",
                      "userId": "b178ded0-31cf-4ce3-bfd1-28e3d674dadf"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "400": {
              "description": "Movie does not exists or movie associate another user!"
            },
            "500": {
              "description": "Internal server Error"
            },
            "201": {
              "description": "OK",
              "content":{
                "application/json":{
                  "schema":{
                    "type": "object",
                    "$ref": "#/components/schemas/MovieRent"
                  }
                }
              }
            }
          }
  
        }
        }
    },
   
  "components":{
    "schemas":{
      "User":{
        "type":"object",
        "properties":{
          "name":{
            "type":"string"
          },
          "email":{
            "type": "string"
          }
        }
      },
      "Movie":{
        "type": "object",
        "properties":{
          "title": {
            "type": "string"
          },
          "duration": {
            "type": "number"
          },
          "release_date": {
            "type": "string"
          }
        }
      },
      "MovieRent":{
        "type": "object",
        "properties":{
          "movieId":{
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        }
      }
    }
  }
}

